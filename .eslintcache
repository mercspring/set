[{"/Users/merc/code/set/src/index.js":"1","/Users/merc/code/set/src/components/card/index.js":"2","/Users/merc/code/set/src/components/Board/index.js":"3","/Users/merc/code/set/src/components/shape/index.js":"4","/Users/merc/code/set/src/utils/deck.js":"5"},{"size":198,"mtime":1609290825099,"results":"6","hashOfConfig":"7"},{"size":1378,"mtime":1609912594989,"results":"8","hashOfConfig":"7"},{"size":2678,"mtime":1609915475339,"results":"9","hashOfConfig":"7"},{"size":2264,"mtime":1609461452075,"results":"10","hashOfConfig":"7"},{"size":7012,"mtime":1609650482932,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"g6i1a7",{"filePath":"15","messages":"16","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"17","messages":"18","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"24"},"/Users/merc/code/set/src/index.js",[],["25","26"],"/Users/merc/code/set/src/components/card/index.js",["27","28","29","30"],"/Users/merc/code/set/src/components/Board/index.js",["31","32"],"/Users/merc/code/set/src/components/shape/index.js",[],"/Users/merc/code/set/src/utils/deck.js",["33"],"function Deck() {\n    // this.colors = ['green', 'red', 'purple'];\n    // this.fill = ['empty', 'striped', 'solid'];\n    // this.number = [1, 2, 3];\n    // this.shapes = ['diamond', 'oval', 'squiggle']\n    this.shuffle = function (arr) {\n        let currentIndex = arr.length, temporaryValue, randomIndex;\n\n        while (0 !== currentIndex) {\n\n            randomIndex = Math.floor(Math.random() * currentIndex);\n            currentIndex -= 1;\n\n            temporaryValue = arr[currentIndex];\n            arr[currentIndex] = arr[randomIndex];\n            arr[randomIndex] = temporaryValue;\n        }\n\n        return arr;\n    }\n    this.cards = [\n        { color: 'green', fill: 'empty', number: 1, shape: 'diamond' },\n        { color: 'green', fill: 'empty', number: 1, shape: 'oval' },\n        { color: 'green', fill: 'empty', number: 1, shape: 'squiggle' },\n        { color: 'green', fill: 'empty', number: 2, shape: 'diamond' },\n        { color: 'green', fill: 'empty', number: 2, shape: 'oval' },\n        { color: 'green', fill: 'empty', number: 2, shape: 'squiggle' },\n        { color: 'green', fill: 'empty', number: 3, shape: 'diamond' },\n        { color: 'green', fill: 'empty', number: 3, shape: 'oval' },\n        { color: 'green', fill: 'empty', number: 3, shape: 'squiggle' },\n        { color: 'green', fill: 'striped', number: 1, shape: 'diamond' },\n        { color: 'green', fill: 'striped', number: 1, shape: 'oval' },\n        { color: 'green', fill: 'striped', number: 1, shape: 'squiggle' },\n        { color: 'green', fill: 'striped', number: 2, shape: 'diamond' },\n        { color: 'green', fill: 'striped', number: 2, shape: 'oval' },\n        { color: 'green', fill: 'striped', number: 2, shape: 'squiggle' },\n        { color: 'green', fill: 'striped', number: 3, shape: 'diamond' },\n        { color: 'green', fill: 'striped', number: 3, shape: 'oval' },\n        { color: 'green', fill: 'striped', number: 3, shape: 'squiggle' },\n        { color: 'green', fill: 'solid', number: 1, shape: 'diamond' },\n        { color: 'green', fill: 'solid', number: 1, shape: 'oval' },\n        { color: 'green', fill: 'solid', number: 1, shape: 'squiggle' },\n        { color: 'green', fill: 'solid', number: 2, shape: 'diamond' },\n        { color: 'green', fill: 'solid', number: 2, shape: 'oval' },\n        { color: 'green', fill: 'solid', number: 2, shape: 'squiggle' },\n        { color: 'green', fill: 'solid', number: 3, shape: 'diamond' },\n        { color: 'green', fill: 'solid', number: 3, shape: 'oval' },\n        { color: 'green', fill: 'solid', number: 3, shape: 'squiggle' },\n        { color: 'red', fill: 'empty', number: 1, shape: 'diamond' },\n        { color: 'red', fill: 'empty', number: 1, shape: 'oval' },\n        { color: 'red', fill: 'empty', number: 1, shape: 'squiggle' },\n        { color: 'red', fill: 'empty', number: 2, shape: 'diamond' },\n        { color: 'red', fill: 'empty', number: 2, shape: 'oval' },\n        { color: 'red', fill: 'empty', number: 2, shape: 'squiggle' },\n        { color: 'red', fill: 'empty', number: 3, shape: 'diamond' },\n        { color: 'red', fill: 'empty', number: 3, shape: 'oval' },\n        { color: 'red', fill: 'empty', number: 3, shape: 'squiggle' },\n        { color: 'red', fill: 'striped', number: 1, shape: 'diamond' },\n        { color: 'red', fill: 'striped', number: 1, shape: 'oval' },\n        { color: 'red', fill: 'striped', number: 1, shape: 'squiggle' },\n        { color: 'red', fill: 'striped', number: 2, shape: 'diamond' },\n        { color: 'red', fill: 'striped', number: 2, shape: 'oval' },\n        { color: 'red', fill: 'striped', number: 2, shape: 'squiggle' },\n        { color: 'red', fill: 'striped', number: 3, shape: 'diamond' },\n        { color: 'red', fill: 'striped', number: 3, shape: 'oval' },\n        { color: 'red', fill: 'striped', number: 3, shape: 'squiggle' },\n        { color: 'red', fill: 'solid', number: 1, shape: 'diamond' },\n        { color: 'red', fill: 'solid', number: 1, shape: 'oval' },\n        { color: 'red', fill: 'solid', number: 1, shape: 'squiggle' },\n        { color: 'red', fill: 'solid', number: 2, shape: 'diamond' },\n        { color: 'red', fill: 'solid', number: 2, shape: 'oval' },\n        { color: 'red', fill: 'solid', number: 2, shape: 'squiggle' },\n        { color: 'red', fill: 'solid', number: 3, shape: 'diamond' },\n        { color: 'red', fill: 'solid', number: 3, shape: 'oval' },\n        { color: 'red', fill: 'solid', number: 3, shape: 'squiggle' },\n        { color: 'purple', fill: 'empty', number: 1, shape: 'diamond' },\n        { color: 'purple', fill: 'empty', number: 1, shape: 'oval' },\n        { color: 'purple', fill: 'empty', number: 1, shape: 'squiggle' },\n        { color: 'purple', fill: 'empty', number: 2, shape: 'diamond' },\n        { color: 'purple', fill: 'empty', number: 2, shape: 'oval' },\n        { color: 'purple', fill: 'empty', number: 2, shape: 'squiggle' },\n        { color: 'purple', fill: 'empty', number: 3, shape: 'diamond' },\n        { color: 'purple', fill: 'empty', number: 3, shape: 'oval' },\n        { color: 'purple', fill: 'empty', number: 3, shape: 'squiggle' },\n        { color: 'purple', fill: 'striped', number: 1, shape: 'diamond' },\n        { color: 'purple', fill: 'striped', number: 1, shape: 'oval' },\n        { color: 'purple', fill: 'striped', number: 1, shape: 'squiggle' },\n        { color: 'purple', fill: 'striped', number: 2, shape: 'diamond' },\n        { color: 'purple', fill: 'striped', number: 2, shape: 'oval' },\n        { color: 'purple', fill: 'striped', number: 2, shape: 'squiggle' },\n        { color: 'purple', fill: 'striped', number: 3, shape: 'diamond' },\n        { color: 'purple', fill: 'striped', number: 3, shape: 'oval' },\n        { color: 'purple', fill: 'striped', number: 3, shape: 'squiggle' },\n        { color: 'purple', fill: 'solid', number: 1, shape: 'diamond' },\n        { color: 'purple', fill: 'solid', number: 1, shape: 'oval' },\n        { color: 'purple', fill: 'solid', number: 1, shape: 'squiggle' },\n        { color: 'purple', fill: 'solid', number: 2, shape: 'diamond' },\n        { color: 'purple', fill: 'solid', number: 2, shape: 'oval' },\n        { color: 'purple', fill: 'solid', number: 2, shape: 'squiggle' },\n        { color: 'purple', fill: 'solid', number: 3, shape: 'diamond' },\n        { color: 'purple', fill: 'solid', number: 3, shape: 'oval' },\n        { color: 'purple', fill: 'solid', number: 3, shape: 'squiggle' }\n    ]\n    this.Deck = this.shuffle(this.cards);\n    this.deal = function (number) {\n        const dealtCards = [];\n        for (let i = 0; i < number; i++) {\n            dealtCards.push(this.Deck.pop())\n        }\n        console.log(dealtCards)\n        return dealtCards\n    }\n}\n\nconst deal = function (number, deck) {\n    const dealtCards = [];\n    for (let i = 0; i < number; i++) {\n        dealtCards.push(deck.pop())\n    }\n    console.log(dealtCards)\n    return dealtCards\n}\nconst newDeck = new Deck()\nconsole.log(newDeck.Deck)\n\nexport default newDeck.Deck\n\n",["34","35"],{"ruleId":"36","replacedBy":"37"},{"ruleId":"38","replacedBy":"39"},{"ruleId":"40","severity":1,"message":"41","line":1,"column":17,"nodeType":"42","messageId":"43","endLine":1,"endColumn":25},{"ruleId":"40","severity":1,"message":"44","line":1,"column":27,"nodeType":"42","messageId":"43","endLine":1,"endColumn":36},{"ruleId":"40","severity":1,"message":"45","line":20,"column":13,"nodeType":"42","messageId":"43","endLine":20,"endColumn":29},{"ruleId":"46","severity":1,"message":"47","line":22,"column":74,"nodeType":"48","messageId":"49","endLine":22,"endColumn":76},{"ruleId":"40","severity":1,"message":"50","line":1,"column":38,"nodeType":"42","messageId":"43","endLine":1,"endColumn":44},{"ruleId":"51","severity":1,"message":"52","line":54,"column":8,"nodeType":"53","endLine":54,"endColumn":23,"suggestions":"54"},{"ruleId":"40","severity":1,"message":"55","line":115,"column":7,"nodeType":"42","messageId":"43","endLine":115,"endColumn":11},{"ruleId":"36","replacedBy":"56"},{"ruleId":"38","replacedBy":"57"},"no-native-reassign",["58"],"no-negated-in-lhs",["59"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'tmpSelectedCards' is assigned a value but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'useRef' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'deck', 'numberOfRows', and 'setsFound'. Either include them or remove the dependency array. You can also do a functional update 'setSetsFound(s => ...)' if you only need 'setsFound' in the 'setSetsFound' call.","ArrayExpression",["60"],"'deal' is assigned a value but never used.",["58"],["59"],"no-global-assign","no-unsafe-negation",{"desc":"61","fix":"62"},"Update the dependencies array to be: [deck, numberOfRows, selectedCards, setsFound]",{"range":"63","text":"64"},[1650,1665],"[deck, numberOfRows, selectedCards, setsFound]"]